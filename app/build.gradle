apply plugin: 'com.android.application'
apply plugin: 'spoon'
apply plugin: 'kotlin-android'
apply plugin: "io.intrepid.static-analysis"
apply from: 'version.gradle'
apply from: 'coverage.gradle'
// Uncomment the following line after adding fabric.properties file
//apply plugin: 'io.fabric'

ext.localProperties = new Properties()
def localPropertiesFile = project.rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    ext.localProperties.load(localPropertiesFile.newDataInputStream())
}
ext.getLocalProperty = { propertyName ->
    def property = localProperties.getProperty(propertyName)
    return property == null ? "" : property
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        applicationId "io.intrepid.multiskeleton"
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "io.intrepid.multiskeleton.CustomTestRunner"
    }

    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
            storePassword "password"
            keyAlias "debug"
            keyPassword "password"
        }

        release {
            def fileName = getLocalProperty("signing_file")
            if (!fileName.isEmpty()) {
                storeFile file(fileName)
                storePassword getLocalProperty("signing_password")
                keyAlias getLocalProperty("signing_alias")
                keyPassword getLocalProperty("signing_key_password")
            }
            return true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            buildConfigField "boolean", "LOG_CONSOLE", "true"
            buildConfigField "boolean", "REPORT_CRASH", "false"
        }

        qa {
            initWith(buildTypes.debug)

            applicationIdSuffix ".qa"
            versionNameSuffix versionSuffix()

            buildConfigField "boolean", "LOG_CONSOLE", "true"
            buildConfigField "boolean", "REPORT_CRASH", "true"
        }

        release {
            buildConfigField "boolean", "LOG_CONSOLE", "false"
            buildConfigField "boolean", "REPORT_CRASH", "true"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true;
    }

    // Support libraries
    def supportVersion = "27.0.2"
    implementation "com.android.support:support-v4:$supportVersion"
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"

    // Google play services
    def googlePlayVersion = "11.8.0"
    implementation "com.google.android.gms:play-services-base:$googlePlayVersion"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:2.1.8"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
    implementation "io.reactivex.rxjava2:rxkotlin:2.2.0"

    // Jake Wharton/Square
    def retrofitVersion = "2.3.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.google.code.gson:gson:2.8.2"

    def okhttpVersion = "3.9.1"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    def butterKnifeVersion = "8.8.1"
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    kapt "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
    implementation 'com.jakewharton.timber:timber:4.6.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'

    // Other
    implementation "io.intrepid.commonutils:commonutils:0.2.3"

    // LeakCanary
    def leakCanaryVersion = "1.5.4"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    qaImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Common test dependencies
    def junitLib = "junit:junit:4.12"
    def mockitoVersion = "2.13.0"
    def mockitoLib = "org.mockito:mockito-core:$mockitoVersion"
    def mockitoKotlinLib = "com.nhaarman:mockito-kotlin-kt1.1:1.5.0"
    def supportAnnotationLib = "com.android.support:support-annotations:$supportVersion"

    // Unit tests
    testImplementation junitLib
    testImplementation mockitoLib
    testImplementation supportAnnotationLib
    testImplementation mockitoKotlinLib

    // UI tests
    androidTestImplementation junitLib
    androidTestImplementation mockitoLib
    androidTestImplementation supportAnnotationLib
    androidTestImplementation(mockitoKotlinLib) {
        exclude module: "kotlin-reflect"
    }
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"

    def androidTestVersion = "1.0.1"
    androidTestImplementation "com.android.support.test:runner:$androidTestVersion"
    androidTestImplementation "com.android.support.test:rules:$androidTestVersion"
    def espressoVersion = "3.0.1"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-idling-resource:$espressoVersion"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
}

spoon {
    debug = true
    adbTimeout = 30

    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName
    }

    if (project.hasProperty('spoonMethodName')) {
        methodName = project.spoonMethodName
    }

    grantAllPermissions = true
}
